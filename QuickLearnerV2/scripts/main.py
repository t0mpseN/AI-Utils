# main.py
from quicklearner import QuickLearner

MODE = "direct"  # Altere para "rag" ou "direct"

def display_response(response):
    """Formats and displays the response with clean formatting"""
    print("\n" + "="*60)  # Top border
    print("ANSWER:".center(60))
    print("="*60)
    
    # Print answer with proper indentation and line wrapping
    answer_lines = response["answer"].split('\n')
    for line in answer_lines:
        print(f"  {line}")
    
    print("\n" + "-"*60)
    print("SOURCES:".center(60))
    print("-"*60)
    
    # Deduplicate and format sources
    seen_sources = set()
    for src in response["sources"]:
        source_str = f"{src['source']} (page {src.get('page', 'N/A')})"
        if source_str not in seen_sources:
            print(f"  ‚Ä¢ {source_str}")
            seen_sources.add(source_str)

if __name__ == "__main__":

    # Debug first - show document structure
    from pathlib import Path
    from document_processor import load_documents

    document_directory = "../documents"
    doc_path = Path(document_directory)
    if not doc_path.is_absolute():
        doc_path = Path(__file__).parent / document_directory


    print("\n‚è≥ Loading documents...")
    all_docs = load_documents(str(doc_path))


    print("\nüîç Verifica√ß√£o cr√≠tica do conte√∫do:")
    debug_file = "documento_debug.txt"
    try:
        with open(debug_file, 'w', encoding='utf-8') as f:  # Crucial for Windows
            for doc in all_docs:
                f.write(f"=== P√ÅGINA {doc.metadata['page']+1} ===\n")
                f.write(doc.page_content + "\n\n")
        print(f"‚úî Arquivo '{debug_file}' criado com sucesso (codifica√ß√£o UTF-8)")
    except Exception as e:
        print(f"‚ö† Falha ao criar arquivo de debug: {str(e)}")

        # Before creating QuickLearner
    print("\nüîç Validating document processing:")
    if not all_docs:
        raise ValueError("No documents were loaded!")

    # Check text content
    sample_doc = all_docs[0]
    print(f"Sample page content (length={len(sample_doc.page_content)}):")
    print(sample_doc.page_content[:200].replace('\n', ' ') + "...")

    # Verify splitting
    from document_processor import split_documents
    split_docs = split_documents(all_docs)
    print(f"\nSplit into {len(split_docs)} chunks")
    print("Sample chunk:", split_docs[0].page_content[:200] + "...")

    ''' 
    print(f"‚úÖ Loaded {len(all_docs)} pages total")
    

    print("\nüîç Analisando estrutura do documento:")

    # 1. Mostra estat√≠sticas b√°sicas
    total_chars = sum(len(d.page_content) for d in all_docs)
    print(f"Total de p√°ginas: {len(all_docs)}")
    print(f"Total de caracteres: {total_chars}")
    print(f"M√©dia por p√°gina: {total_chars//len(all_docs)} chars")

    # 2. Identifica p√°ginas com conte√∫do real (m√©todo universal)
    def is_content_page(text):
        text = text.lower().strip()
        return (
            len(text) > 300  # P√°ginas com menos de 300 chars s√£o provavelmente capas/sum√°rios
            and not text.startswith("pref√°cio")
            and not text.startswith("sum√°rio")
            and "..." not in text  # Elimina p√°ginas com muitos ... (indicando formata√ß√£o quebrada)
        )

    technical_pages = [doc for doc in all_docs if is_content_page(doc.page_content)]

    # 3. Mostra amostras inteligentes
    print(f"\nüìä P√°ginas t√©cnicas identificadas: {len(technical_pages)}/{len(all_docs)}")
    for i, page in enumerate(technical_pages[:0]):  # Mostra at√© 3 p√°ginas de exemplo
        content_sample = ' '.join(page.page_content.split()[:30])  # Primeiras 30 palavras
        print(f"\nüìÑ P√°gina {page.metadata.get('page', '?')+1}:")
        print(f"{content_sample}...")

    if not technical_pages:
        print("\n‚ö†Ô∏è ATEN√á√ÉO: Nenhuma p√°gina com conte√∫do substancial foi detectada!")
        print("Prov√°veis causas:")
        print("- O documento pode estar em formato de imagem (OCR necess√°rio)")
        print("- O texto pode estar em camadas n√£o extra√≠veis")
        print("- O arquivo pode estar corrompido")
        
        # Debug avan√ßado - mostra padr√µes encontrados
        print("\nüßê Padr√µes encontrados nas primeiras p√°ginas:")
        for i, doc in enumerate(all_docs[:0]):
            print(f"\nP√°gina {i+1} (Meta: {doc.metadata}):")
            print(doc.page_content[:100].replace('\n', ' ') + "...")
    '''
    

    print("\nüöÄ Starting QuickLearner...")
    # Initialize with your documents directory
    quick_learner = QuickLearner("../documents")

    '''
    ql = QuickLearner("../documents")
    response = ql.query("Detalhe o procedimento completo para juntas de movimenta√ß√£o")
    print(response["answer"])
    '''
    
    # Query the system
    while True:
        question = input("\nAsk QuickLearner a question (or 'quit' to exit): ")
        if question.lower() == 'quit':
            break
        
        if MODE == "direct":
            if "p√°gina" in question.lower():
                page_num = int(input("Qual p√°gina devo verificar? "))
                response = quick_learner.query_direct(question, specific_page=page_num)
            else:
                response = quick_learner.query_direct(question)
        else:
            response = quick_learner.query(question)
            
        display_response(response)  # Use the new display function